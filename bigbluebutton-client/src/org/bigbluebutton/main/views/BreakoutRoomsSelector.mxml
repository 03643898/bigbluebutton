<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:ComboBox xmlns:mx="http://www.adobe.com/2006/mxml"
			 xmlns:mate="http://mate.asfusion.com/"
			 dataProvider="{bRooms}"
			 change="chooseBreakoutRoom(event)" width="120" height="22">
	<mate:Listener type="{ConferenceCreatedEvent.CONFERENCE_CREATED_EVENT}" method="getBreakoutRoomNames" />
	<mate:Listener type="{CallConnectedEvent.CALL_CONNECTED_EVENT}" method="disableCombo" />
	<mate:Listener type="{CallDisconnectedEvent.CALL_DISCONNECTED_EVENT}" method="enableCombo" />
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.collections.ArrayCollection;
			
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.main.events.UserChangedBreakoutRoomEvent;
			import org.bigbluebutton.main.model.users.events.ConferenceCreatedEvent;
			import org.bigbluebutton.modules.phone.events.CallConnectedEvent;
			import org.bigbluebutton.modules.phone.events.CallDisconnectedEvent;
			
			[Bindable] private var bRooms:ArrayCollection = new ArrayCollection(); 
			
			private function chooseBreakoutRoom(event:Event):void {
				var evt:UserChangedBreakoutRoomEvent = new UserChangedBreakoutRoomEvent();
				evt.name = event.currentTarget.selectedItem.label;
				evt.number = event.currentTarget.selectedItem.data;
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(evt);
			}

			public function disableCombo(evt:Event):void{
				this.enabled = false;
			}

			public function enableCombo(evt:Event):void{
				this.enabled = true;
			}

			public function getBreakoutRoomNames(e:ConferenceCreatedEvent):void{
				var breakoutRooms:Array = UserManager.getInstance().getConference().breakoutRooms;
				bRooms = new ArrayCollection(); 
				bRooms.addItem({label:"Audio Numbers",number:UserManager.getInstance().getConference().dialNumber});
				for(var i:Number=0; i<breakoutRooms.length; i++){
					var obj:Object = {};
					obj.label = breakoutRooms[i].name;
					obj.data = breakoutRooms[i].number;
					bRooms.addItem(obj);
				}
			}
		]]>
	</mx:Script>
</mx:ComboBox>
